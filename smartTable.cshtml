
<style>
    #smartTable_app {
        background: white;
    }
    #smartTable > tbody:nth-child(2n){
        background-color: #f1f9ff;
    }
    #smartTable{
        width:100%;
    }
    #smartTable th {
        padding:5px;
    }
    #smartTable  td {
        padding:5px;
    }
    #smartTable tr {
        padding:5px;
    }
    #sort_arrow td:hover {
        background-color:#d5e8fd;
    }    
    .filter{
        position:absolute;
        text-align: left;
        background-color:white;
        padding: 5px;
        border: solid;
        border-radius: 10px;
        border-color: lightblue;
        z-index: 1;
    }
    .filterList{
        max-height: 350px;
        overflow-y: auto;
    }
    .filter p {
        padding: 2px;
        display: flex;
    }
    .filter .data_filter input {
        float: right;
    }
    .filter p:hover{
        background-color:#f1f9ff;
    }
    #sort_arrow td:hover {
        background-color:#d5e8fd;
    }
    #smartTable thead {
        background-color:#f1f9ff;
        text-align: center;
        position: sticky;
        top: 0;
        z-index: 1000;
    }
    #smartTable thead td {
        outline: solid;
        outline-color: lightgray;
        outline-width: 1px;
    }
    #sort_arrow td:hover {
        background-color:#d5e8fd;
        text-align: center;
    }
    .findImput{
        width: 100%;
    }
    .filterButton{
        float: right;
    }
    .filterButton input{
        margin: 0px 0px 0px 5px;
    }
    thead tr:nth-child(2) td {
        resize: horizontal;
        overflow: hidden;
    }
    .header{
        text-align: end;
        font-size: 15px;
    }
</style>

<div id="smartTable_app">
    <p class="header">
        Всего записей: {{ObjectArray.length}} 
        <i class="fas fa-arrow-square-left" @@click="change_page(-page_size)"></i>
        {{this.page / page_size}}
        <i class="fas fa-arrow-square-right" @@click="change_page(page_size)"></i>
        <select v-model="page_size">
            <option v-for="size in page_size_array">{{size}}</option>
        </select>
        <button @@click="donwload()" class="t-button"><i class="fa-solid fa-download"></i></button>
    </p>
    <table id="smartTable" border="1">
		<thead>
            <tr>
				<td v-for="columns,idx in columns_attributes" :id="columns['column_varable_name']">
                    {{columns['column_name']}}
                </td>
            </tr>
            <tr v-if="filter_calculated == true">
				<td v-for="columns,idx in columns_attributes" :id="columns['column_varable_name']">
                    <filter-component   :filter_type="columns['column_filter_type']" 
                                        :varable_name="columns['column_varable_name']" 
                                        :filter_object="filter[columns['column_varable_name']]"
                                        @@apply_filters="apply_filters">
                    </filter-component>
                </td>
            </tr>
            <tr id="sort_arrow">
                <td v-for="columns,idx in columns_attributes" @@click="sort(columns['column_varable_name'])" style="cursor: pointer;">
                    {{idx + 1}}
                    <i v-if="columns['column_varable_name'] != sort_property.sorted_tab && columns['column_varable_name'] != sort_property.last_sorted_tab"  class="fas fa-sort" style="color: #a4a9ac;"></i>
                    <i v-if="columns['column_varable_name'] == sort_property.sorted_tab" class="fad fa-sort"></i>
                    <i v-if="columns['column_varable_name'] == sort_property.last_sorted_tab" class="fad fa-sort" style="transform: rotate(180deg);"></i>
                </td>
            </tr>
		</thead>
        <tbody v-for="count in ObjectArray.slice(page - page_size, page )" >
            <tr :id="count['Id']" :class="'t' + count['Id']">
                <template v-for="columns in columns_attributes">
                    <td>{{count[columns['column_varable_name']]}}</td>                    
                </template>
            </tr>
        </tbody>    
    </table>
    <p class="header">
        <i class="fas fa-arrow-square-left" @@click="change_page(-page_size)"></i>
        {{this.page / page_size}}
        <i class="fas fa-arrow-square-right" @@click="change_page(page_size)"></i>
    </p>
</div>
<script src="http://cdn.jsdelivr.net/g/filesaver.js"></script>
<script>
    var grid = new Vue({
        el: "#smartTable_app",
        data:{
            ObjectArray: [], 
            ObjectArray_const: @Html.Raw(ObjectArray_JSON), 
            columns_attributes:@Html.Raw(columns_attributes_JSON),
            sort_property:{
                sorted_tab: "",     
                last_sorted_tab: "",
            },
            page: 25,    
            page_size: 25,   
            filter:{
            },
            page_size_array:[
                5,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45,
                50,
                100,
            ],
            filter_calculated:false,
		},
        mounted(){
            this.ObjectArray = this.ObjectArray_const;
            this.$nextTick(() => {
                this.sort("Id")
                this.create_filter()
            });
        },
        watch: {
            page_size(curr){
                this.page = curr - 0;
            },
        },
        methods:{
            open_columns_picker(x){
                let selector = "#"+ x +" .filter"
                if ($(selector)[0].style.display == "none") {
                    $(selector).slideToggle()
                }
            },
            donwload(){
                var textarry = [];
                var name_string = "";
                this.columns_attributes.forEach(element => {
                        name_string += element.column_name + "\t"
                });
                textarry.push(name_string + "\n")

                this.ObjectArray.forEach(element => {
                    var text = ""
                    this.columns_attributes.forEach(element1 => {
                        text += element[element1.column_varable_name] + "\t"
                    });
                    textarry.push(text + "\n")
                });
                saveAs( new Blob( textarry, {type : 'text/csv;charset=utf-8'}), 'data.tsv' );
            },
            create_filter(){
                this.columns_attributes.forEach((element) => {
                    switch(element.column_filter_type) {
                        case 'string':
                            var obj = {};
                            obj["value"]   = [];
                            obj["applied"] = 0;
                            obj["array"]   = [];
                            obj["filtr"]   = [];
                            obj["show"]    = false;
                            Vue.set(this.filter, element.column_varable_name, obj)
                            break;  
                        case 'date':
                            var obj = {};
                            obj["start"]   = "";
                            obj["end"]     = "";
                            obj["applied"] = 0;
                            Vue.set(this.filter, element.column_varable_name, obj)
                            break; 
                        case 'number':
                            var obj = {};
                            obj["start"]   = 0;
                            obj["end"]     = 0;
                            obj["applied"] = 0;
                            Vue.set(this.filter, element.column_varable_name, obj)
                            break;  
                    }
                });
                this.calculated_filters()
            },
            change_page(int){
                this.page += int - 0;
            },
            calculated_filters(){
                this.columns_attributes.forEach((element) => {
                    if (element.column_filter_type == "string") {
                            this.filter[element.column_varable_name]["array"]   = [...new Set(this.ObjectArray.map(x => x[element.column_varable_name]))];

                        this.filter[element.column_varable_name]["filtr"]   = this.filter[element.column_varable_name]["array"].sort();
                    }
                });
                this.filter_calculated = true;
            },
            sort(x){
                if (x == this.sort_property.sorted_tab) {
                    this.ObjectArray.sort(function srt(a, b) {
                    var first  = a[x]["name"] == null ? a[x] : a[x]["name"];
                    var second = b[x]["name"] == null ? b[x] : b[x]["name"];
                    if (first <= second) {
                        return 1;
                    } else if(first == null || first >= second) {
                        return -1;
                    }
                    return 0;
                    });
                    this.sort_property.sorted_tab = ""
                    this.sort_property.last_sorted_tab = x

                } else {
                    this.ObjectArray.sort(function srt(a, b) {
                    var first  = a[x]["name"] == null ? a[x] : a[x]["name"];
                    var second = b[x]["name"] == null ? b[x] : b[x]["name"];
                    if (first >= second) {
                        return 1;
                    } else if (second == null || first <= second) {
                        return -1;
                    }
                    return 0;
                    });
                    this.sort_property.sorted_tab = x
                    this.sort_property.last_sorted_tab = ""
                }
            },
            apply_filters(column){
                $(`#${column} .filter`).slideUp()
                this.page = this.page_size -0;
                
                array = this.ObjectArray_const;

                var regular_filter_array = [];
                var date_filter_array = [];
                var integer_filter_array = [];

                this.columns_attributes.forEach(element => {
                    if (element.column_filter_type == "string" && this.filter[element.column_varable_name]["value"].length != 0) {
                        regular_filter_array.push([element.column_varable_name ,this.filter[element.column_varable_name]])
                    } else if ((element.column_filter_type == "date" && (this.filter[element.column_varable_name]["start"] != "" || this.filter[element.column_varable_name]["end"]) != "")) {
                        date_filter_array.push([element.column_varable_name ,this.filter[element.column_varable_name]])
                    } else if ((element.column_filter_type == "number" && (this.filter[element.column_varable_name]["start"] !=  0 || this.filter[element.column_varable_name]["end"]) !=  0)) {
                        integer_filter_array.push([element.column_varable_name ,this.filter[element.column_varable_name]])
                    } else if (element.column_filter_type == false){

                    } else{
                        this.filter[element.column_varable_name].applied = 0;
                    }
                });
                if (regular_filter_array.length != 0 || date_filter_array.length != 0 || integer_filter_array.length != 0) {
                    regular_filter_array.forEach(element => {
                        this.filter[element[0]]["applied"] = element[1]["value"].length
                        array = array.filter(x => element[1]["value"].includes(x[element[0]]));
                    });
                    date_filter_array.forEach(element => {
                        var aplay = 0;
                        if (element[1]["start"] != "") {
                            array = array.filter(x => Date.parse(x[element[0]]) >= Date.parse(element[1]["start"]));
                            aplay++;
                        } else if (element[1]["end"] != "") {
                            array = array.filter(x => Date.parse(x[element[0]]) <= Date.parse(element[1]["end"]));
                            aplay++;
                        }
                        this.filter[element[0]]["applied"] = aplay;                      
                    });
                    integer_filter_array.forEach(element => {
                        var aplay = 0;
                        if (element[1]["start"] != 0) {
                            array = array.filter(x => x[element[0]] >= element[1]["start"]);
                            aplay++;
                        } else if (element[1]["end"] != 0) {
                            array = array.filter(x => x[element[0]] <= element[1]["end"]);
                            aplay++;
                        }
                        this.filter[element[0]]["applied"] = aplay;                        
                    });
                }
                
                this.ObjectArray = array;
                this.calculated_filters();
            },
        },
        components:{
            "filter-component":{
                props: ['filter_type','varable_name','filter_object'],
                data: function () {
                    return {      
                        find_input: "",  
                    }
                },
                methods:{
                    like(arr, search){
                        search = new RegExp(search.toString().replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'), 'i');
                        return arr.filter(function(el) {
                            return search.test(el);
                        });
                    },
                    hide_and_show_filter(x){
                        let selector = "#"+ x +" .filter"
                        if ($(selector)[0].style.display == "none") {
                            $(selector).slideToggle()
                        }
                    },
                    take_all_filter(){
                        this.filter_object['value'] = this.filter_object['array'];
                    },
                    reset_filter(){
                        if (this.filter_type == "number" || this.filter_type == "integer") {
                            this.filter_object.start = "";
                            this.filter_object.end  = "";
                            return
                        }
                        this.filter_object['value'] = [];
                        this.find_input = "";

                    },
                    apply_filters(){
                        this.$emit('apply_filters')
                    },
                },
                watch: {
                    find_input:{
                        handler(cur){
                            if (cur != '' && cur != undefined ) {
                                this.filter_object["filtr"] = this.like(this.filter_object["array"],cur)
                            } 
                        },
                        deep: true
                    },
                },
                template:`
                    <div>
                        <div @@click="hide_and_show_filter(varable_name)" style="cursor: pointer;">
                            <i class="fas fa-filter"></i>
                            <div v-if="filter_object['applied'] != 0" style="float: right; display: contents;">{{filter_object['applied']}}</div>
                        </div>
                        <div class="filter" style="display: none;">
                            <div class="filterHref">
                                <template v-if="filter_type == 'string'">
                                    <a @@click="take_all_filter()">Выбрать всё </a>
                                </template>
                                <a @@click="reset_filter()"> Сбросить</a>
                            </div>
                                <template v-if="filter_type == 'string'">
                                    <p>
                                        <input type="text" class="findImput" v-model="find_input" >
                                    </p>
                                    <div class="filterList">
                                        <p v-for="z,idx in filter_object['filtr']">
                                            <input type="checkbox" :id="varable_name + idx" v-model="filter_object['value']" :value="z" >
                                            <label :for="varable_name + idx" style="cursor: pointer;">{{z == "" ? "Пусто / Не указано" : z}}</label>
                                        </p>
                                    </div>
                                </template>
                                <template v-if="filter_type == 'date'">
                                    <div class="data_filter">
                                        <p>С  :
                                            <input type="date" v-model="filter_object['start']">
                                        </p>
                                        <p>По:
                                            <input type="date" v-model="filter_object['end']">
                                        </p>
                                    </div>
                                </template>
                                <template v-if="filter_type == 'number'">
                                    <div class="data_filter">
                                        <p>С  :
                                            <input type="number" v-model="filter_object['start']">
                                        </p>
                                        <p>По:
                                            <input type="number" v-model="filter_object['end']">
                                        </p>
                                    </div>
                                </template>
                            <div class="filterButton">
                                <input type="button" value="применить" @@click="apply_filters(varable_name)" style="background-color: #4e80c1;color: white;">
                            </div>
                        </div>
                    </div>
                `
            },
        },
    });    
    
    // сокрытие фильтра при клике в не div фильтра
    jQuery(function($){
        $(document).mouseup(function (e){ // событие клика по веб-документу
            $(".filter").each((x,y) => slideUpFilter($(y)))
            function slideUpFilter(filter_div) {
                if (!filter_div.is(e.target) // если клик был не по нашему блоку
                    && filter_div.has(e.target).length === 0 && filter_div[0].style.display != "none") { // и не по его дочерним элементам
                    filter_div.slideUp(); // скрываем его
                }
            }
        });
    });
</script>
