@using Newtonsoft.Json.Linq
@using Devart.Data.PostgreSql
@using EleWise.ELMA.CRM.Models
@using EleWise.ELMA.CRM.Web.Models
@using EleWise.ELMA.ConfigurationModel
@using EleWise.ELMA.Model.Managers
@using EleWise.ELMA.API
@using EleWise.ELMA.Helpers
@using EleWise.ELMA.Security.Managers;
@using EleWise.ELMA.Security.Models;
@using EleWise.ELMA.Security.Services;

@using ViewType = EleWise.ELMA.Model.Views.ViewType



@{
    var curUser = PublicAPI.Portal.Security.User.GetCurrentUser(); // Админ=1, РК=16, КНК=32, КТО=53, ПКТО=73, ПКНК(МОС)=33, РОП=27
    var userGroupsSale = PublicAPI.Portal.Security.UserGroup.FindByIdArray(
    new long[] {1,16,87,32,108,27,79,64,85}
    ).SelectMany(x => x.Users).Where(x => PublicAPI.Portal.Security.User.IsActive(x) ).Select(x => x.Id);

}
@if(userGroupsSale.Contains( curUser.Id )){

    string query = @"SELECT
    min(pa.""date""),
    u.fullname,
    rd.naimenovanievygodopriobretat,
    contractor.id,
    rd.nomerdogovora,
    rd.id,
    (
        CASE
            WHEN rd.prichinaregistraciidog_v2 = 0 THEN 'Продажа'
            WHEN rd.prichinaregistraciidog_v2 = 1 THEN 'Допродажа'
            WHEN rd.prichinaregistraciidog_v2 = 12 THEN 'Перезаключение - увеличение'
            WHEN rd.prichinaregistraciidog_v2 = 4 THEN 'Перезаключение - продажа'
            ELSE 'Восстановление'
        END
    ),
    pu.naimenovanie,
    rd.summaekvivalentnayaezhemesya,
    (
        CASE
            WHEN rd.statuspodpisaniyadogovora_v2 = 0 THEN 'Черновик'
            WHEN rd.statuspodpisaniyadogovora_v2 = 1 THEN 'Не отправлен'
            WHEN rd.statuspodpisaniyadogovora_v2 = 2 THEN 'На согласовании'
            WHEN rd.statuspodpisaniyadogovora_v2 = 3 THEN 'Отменен перед согласованием'
            WHEN rd.statuspodpisaniyadogovora_v2 = 4 THEN 'Отменен'
            WHEN rd.statuspodpisaniyadogovora_v2 = 11 THEN 'Предварительно согласован'
            WHEN rd.statuspodpisaniyadogovora_v2 = 12 THEN 'Согласован'
        END
    ),
    rd.DataNachalaObsluzhivaniyaPoD,
    rd.DataOkonchaniyaObsluzhivaniy,
    (
        SELECT
            pa1.amount
        FROM
            reestrdogovorovver2 rd1
            LEFT JOIN realizaciya ra1 ON ra1.dogovor = rd1.id
            LEFT JOIN payment1c pa1 ON pa1.account = ra1.id
        WHERE
            rd1.id = rd.id
            AND pa1.amount is not null
            AND pa1.""date"" = (
                SELECT
                    min(pa2.""date"")
                FROM
                    reestrdogovorovver2 rd2
                    LEFT JOIN realizaciya ra2 ON ra2.dogovor = rd2.id
                    LEFT JOIN payment1c pa2 ON pa2.account = ra2.id
                WHERE
                    rd2.id = rd.id
            )
        LIMIT
            1
    )
FROM
    reestrdogovorovver2 rd
    LEFT JOIN ""User"" u ON rd.iniciatorregistraciidogovora = u.id
    LEFT JOIN contractor ON rd.naimenovanievygodopriobretat = contractor.""Name""
    LEFT JOIN usergroup_user_map ugm ON ugm.userid = u.id
    LEFT JOIN usergroup ug ON ug.id = ugm.groupid
    LEFT JOIN m_rdv2_paketyuslug mtm_pu ON mtm_pu.parent = rd.id
    LEFT JOIN paketuslug_ pu ON pu.id = mtm_pu.child
    LEFT JOIN realizaciya ra ON ra.dogovor = rd.id
    LEFT JOIN payment1c pa ON pa.account = ra.id
WHERE
    rd.prichinaregistraciidog_v2 in (0, 1, 2, 12, 4)
    and u.fullname is not null
GROUP BY
    u.fullname,
    rd.naimenovanievygodopriobretat,
    contractor.id,
    rd.nomerdogovora,
    rd.id,
    rd.prichinaregistraciidog_v2,
    pu.naimenovanie,
    rd.statuspodpisaniyadogovora_v2
ORDER BY
    2";

    string query2 = @"
    select
        rd.id idOfPrevius,
        rd.NomerDogovora PreviusNomer,
        rd2.id idOfCurrent,
        (
        case

            when rd.PrichinaRegistraciiDog_v2 = 0	then 'Продажа'
            when rd.PrichinaRegistraciiDog_v2 = 1	then 'Допродажа'
            when rd.PrichinaRegistraciiDog_v2 = 2	then 'Восстановление'
            when rd.PrichinaRegistraciiDog_v2 = 3	then 'Тестовый доступ'
            when rd.PrichinaRegistraciiDog_v2 = 4	then 'Продажа :: перезаключение'
            when rd.PrichinaRegistraciiDog_v2 = 11	then 'Перезаключение :: сохранение'
            when rd.PrichinaRegistraciiDog_v2 = 12	then 'Перезаключение :: увеличение'
            when rd.PrichinaRegistraciiDog_v2 = 13	then 'Перезаключение :: уменьшение'
            when rd.PrichinaRegistraciiDog_v2 = 14	then 'Перезаключение :: бесплатно'

        end
        ) PreviusReason,
        ""User"".FamiliyaIO PreviusInitiatorFIO

        from ReestrDogovorovVer2 rd
        left join ReestrDogovorovVer2 rd2 on rd.PerezaklyuchennyyDogovor = rd2.id
        left join ""User"" on rd.IniciatorRegistraciiDogovora = ""User"".id

        where rd2.id is not null and ""User"".FamiliyaIO is not null
            
            
    ";

    var conn = new PgSqlConnection("User Id=postgres;Password=123;host=127.0.0.1;port=5445;database=ELMA3;unicode=true");
	var cmd = new PgSqlCommand(query,conn);

    // Запрос на другую таблицу
	var cmd2 = new PgSqlCommand(query2,conn);

    conn.Open();

    var reader = cmd.ExecuteReader();
    var reader2 = cmd2.ExecuteReader();

    JObject names = new JObject();
    JObject jdata = new JObject();
    DateTime now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    List<String> dates = new List<String>();
    for(var month = -5;month < 1;month++){
        dates.Add(now.AddMonths(month).ToString("yyyy'/'MM"));
    }
    var months = dates.OrderByDescending(x => x);
    JArray jdates = JArray.FromObject(months);

    try {
        while (reader.Read()) {
            DateTime platech    = reader.GetDateTime(0);
            var date            = platech.ToString("yyyy'/'MM");
            string name         = reader.GetString(1);
            string contrgent    = reader.GetString(2);
            string contrgentid  = reader.GetString(3);
            string nomer        = reader.GetString(4);
            string nomerId      = reader.GetString(5);
            string prichina     = reader.GetString(6);
            string paket        = reader.GetString(7);
            int summa           = reader.GetInt32(8);
            string status       = reader.GetString(9);
            DateTime platech1   = reader.GetDateTime(0);
            var date1           = platech1.ToString("dd'.'MM'.'yy");
            
            string dataFactStart    = reader.GetDateTime(10).ToString("dd'.'MM'.'yyyy");
            string dataFactEnd      = reader.GetDateTime(11).ToString("dd'.'MM'.'yyyy");
            float amount            = reader.GetFloat(12);

            string srok = string.Format("С {0} по {1}", dataFactStart, dataFactEnd);


            if (jdata[date] == null){
                jdata[date] = date;}
                
            if (names[name] == null){
                names[name] = new JArray();}
            ((JArray)names[name]).Add(JObject.FromObject(new { name = name, date = date , nomer = nomer, nomerId = nomerId, prichina = prichina, contrgent = contrgent, contrgentid = contrgentid  , paket = paket, summa = summa, status = status,  date1 = date1, srok = srok, amount = amount}));
        }
    } finally {
        reader.Close();
    }


    JObject previusDogovor = new JObject();

    try {
        while (reader2.Read()){
            
            string prevID               = reader2.GetString(0);
            string PreviusNomer         = reader2.GetString(1);
            string idOfCurrent          = reader2.GetString(2);
            string PreviusReason        = reader2.GetString(3);
            string PreviusInitiatorFIO  = reader2.GetString(4);


            if(previusDogovor[idOfCurrent] == null){
                
                previusDogovor[idOfCurrent] = new JObject();

                previusDogovor[idOfCurrent]["ID"] = prevID;
                previusDogovor[idOfCurrent]["Nomer"] = PreviusNomer;
                previusDogovor[idOfCurrent]["Reason"] = PreviusReason;
                previusDogovor[idOfCurrent]["Init"] = PreviusInitiatorFIO;
            }
           
        }
    } finally {
        reader2.Close();
    }


    conn.Close();



<style>
#grid {
padding:10px;
background: white;
}

#tab {
    width:100%;
}

#tab tr:nth-child(2n) {
    background-color:#f1f9ff
}

#tab tr:hover {
    text-decoration: none;
    background-color:#d5e8fd
}

#tab th {
    padding:5px;
}

#tab td {
    padding:5px;
}

#tab tr {
    padding:5px;
}

#one {
    width:15px;
}

#two {
    width:45px;
}

#right{
    text-align:right;
}



    #grid .left{
        padding:3px;
        margin-right:3px;
        border-radius:3px;
        transition: background-color 0.5s;
        cursor: pointer;
    }
    #grid .blue{
        background-color:#27a8d7;
        color:white;
    }
    #grid .green{
        background-color:#3caa6c;
        color:white;
    }
    #grid .right{
        padding:3px;
        margin-left:3px;
        border-radius:3px;
        transition: background-color 0.5s;
        cursor: pointer;
    }
    
    #grid .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #27a8d7;
        -webkit-transition: .4s;
        transition: .4s;
    }

    #grid .slider:before {
        position: absolute;
        content: "";
        height: 12px;
        width: 12px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
    }

    #grid input:checked + .slider {
        background-color: #3caa6c;
    }

    #grid input:focus + .slider {
        box-shadow: 0 0 1px #3caa6c;
    }

    #grid input:checked + .slider:before {
        -webkit-transform: translateX(16px);
        -ms-transform: translateX(16px);
        transform: translateX(16px);
    }

    /* Rounded sliders */
    #grid .slider.round {
        border-radius: 16px;
    }

    #grid .slider.round:before {
        border-radius: 50%;
    }
    #grid .switch{
        position: relative;
        display: inline-block;
        width: 32px;
        height: 16px;
        padding: 0;
        min-width: 32px;
        min-height: 16px;
    }
    #grid .flex{
        display:flex;
        align-items:center;
    }
</style>

<div id="grid">

    <table id="tab" border="1">
    <div class="flex">
        <div :class="{left: true, blue: !switcher}">Отсортировать внутри месяца по инициатору</div>
        <label class="switch">
            <input @@click="sort(bool)" type="checkbox" v-model="switcher">
            <span class="slider round"></span>
        </label>
        <div :class="{right: true,green: switcher }">Отсортировать внутри месяца по дате 1го платежа</div>
    </div>

        <tbody v-for="month in dat">
            <tr>
                <td id="one"><i class="fas fa-plus-square" style="font-size: 16px;" @@click="hide(month)"></td>
                <td id="two">{{month}}</td>
                <td colspan="13"></td>
            </tr>
            <tr is="info" :hide="hide" :class="month.replace( /[^0-9]+/g , '')" style="display:none"></tr>
            <template v-if="bool == true">
                <tr v-for="value,name in names(inf, month)" is="cols" :value="value" :class="month.replace( /[^0-9]+/g , '')" style="display:none"></tr>
            </template>
            <template v-else>
                <tr v-for="value,name in namesSort(inf, month)" is="cols" :value="value" :class="month.replace( /[^0-9]+/g , '')" style="display:none"></tr>
            </template>
        </tbody>
    </table>

</div>
<div>
Первые платежи по продажам, показывает договоры у которых в этом месяце произошла первая оплата, и он показывает Дату 1-го платежа,    Инициатор,    № договора,    причину регистрации, выгодоприобретателя, Пакет услуг, Сумму эквивалентную ежемесячному платежу и Статус подписания. <br>
в отчете есть возможность сортировки по имени инициатора или по дате первого платежа. <br>
Отчет построен на договорах, у которых статус подписания договора равен продажа, допродажа, восстановление, перезаключение увеличение и продажа перезаключение. И сотрудник состоит в группах Рук.Гр.!О!П :: (КД) или МГр.!О!П :: (КД) или Рук.Гр.!О!П1С :: (КД) или МГр.!О!П1С :: (КД),27 РОП (было-КОМИП).
</div>
<script>

    var grid = new Vue({

        el:"#grid",

        data:{
            switcher: false,
            inf: @Html.Raw(names),
            dat: @Html.Raw(jdates),
            bool: true,
            prevDog: @Html.Raw(previusDogovor)
        },
        methods:{
            names(inf, month, bool){
                let val = Object.values(inf).flat();
                let fil = new Set(val.filter(x => x.date == month).map(x => x.nomer));
                let fil2 = [];
                fil.forEach(element => {
                    let fil1 = val.filter(x => x.date == month && x.nomer == element);
                    fil2.push(fil1)
                });
                return fil2;
            },
            namesSort(inf, month, bool){
                let val = Object.values(inf).flat();
                let fil = new Set(val.filter(x => x.date == month).map(x => x.nomer));
                let fil2 = [];
                fil.forEach(element => {
                    let fil1 = val.filter(x => x.date == month && x.nomer == element);
                    fil2.push(fil1)
                });
                let sort = fil2.sort((a, b) => {
                    if (a[0].date1 > b[0].date1) return -1;
                    if (a[0].date1 > b[0].date1) return 1;
                });
                return sort;
            },
            sort(bool){
                this.bool = !this.bool
            },
            hide(month){
                $(event.target).closest("tbody").find("." + month.replace( /[^0-9]+/g , '')).toggle();
                
            },
          
        },
        components:{
            "info":{
                template:`
                    <tr>
                        <td colspan="2"></td>
                        <td>Дата 1-го платежа</td>
                        <td>Инициатор</td>
                        <td>№ договора</td>
                        <td>причина регистрации</td>
                        <td>выгодоприобретатель</td>
                        <td>Пакет услуг</td>
                        <td>Сумма эквивалентная ежемесячному платежу</td>
                        <td>Статус подписания</td>
                        <td>Сроки действия договора</td>
                        <td>Фактическая сумма поступившего платежа</td>
                        <td>Предыдущий договор</td>
                    </tr>
                `
            },
            "cols":{
                props:["value"],
                data(){
                    return{
                        keyArray: ["ID","Nomer","Reason","Init"],
                    }
                },
                methods:{
                    getDataOfOld(inf, value){
                        //возврат значения через глобальный объект
                        var val = Object.values(inf[0]).flat()[3];
                        return this.$parent.prevDog[val][this.keyArray[value]];
                    },
                    platech(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[10];
                    },
                    iniciator(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[0];
                    },
                    dogovor(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[2];
                    },
                    idDogovor(inf){
                        let val = Object.values(inf[0]).flat();
                        return val[3];
                    },
                    prichins(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[4];
                    },
                    contractor(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[5];
                    },
                    idContractor(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[6];
                    },
                    paketUs(inf){
                        if (inf.length != 1) {
                            let text = [];
                            inf.forEach(element => {
                                
                                let val = Object.values(element).flat();
                                text.push(val[7]);

                            });          
                            return text;
                        }
                        else {
                            let val = Object.values(inf[0]).flat();                            
                            return [val[7]];
                        }
                    },
                    sum(inf, value){
                        let val = Object.values(inf[0]).flat();
                        val = val[8];
                        let del = val.toLocaleString('ru');
                        return del;
                    },
                    statusi(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[9];
                    },
                    sroki(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[11];
                    },
                    amount(inf, value){
                        let val = Object.values(inf[0]).flat();
                        return val[12];
                    }
                },
                template:`
                    <tr>
                        <td colspan="2"></td>
                        <td>{{platech(value)}}</td>
                        <td>{{iniciator(value)}}</td>
                        <td><a :href="'/Common/Catalogs/ViewItem/' + idDogovor(value) + '?uid=981c1e9a-7b8b-4638-b10d-c46a3a30e37e&backUrl=%2FCommon%2FCatalogs%2FView%3Fuid%3D981c1e9a-7b8b-4638-b10d-c46a3a30e37e%26filterId%3D234'">{{dogovor(value)}}</a></td>
                        <td>{{prichins(value)}}</td>
                        <td><a :href="'/CRM/ContractorLegal/Details/' + idContractor(value)">{{contractor(value)}}</a></td>
                        <td><p v-for="pack in paketUs(value)">{{pack}}</p></td>
                        <td id="right">{{sum(value)}}</td>
                        <td>{{statusi(value)}}</td>
                        <td>{{sroki(value)}}</td>
                        <td id="right">{{amount(value)}}</td>
                        <template v-if = "this.$parent.prevDog[idDogovor(value)] != null" >
                        <td><a :href="'/Common/Catalogs/ViewItem/' + this.getDataOfOld(value, 0) + '?uid=981c1e9a-7b8b-4638-b10d-c46a3a30e37e&backUrl=%2FCommon%2FCatalogs%2FView%3Fuid%3D981c1e9a-7b8b-4638-b10d-c46a3a30e37e%26filterId%3D234'">
                            <p>{{getDataOfOld(value, 1)}}</p></a>
                            <p>{{getDataOfOld(value, 2)}}</p>
                            <p>{{getDataOfOld(value, 3)}}</p>
                        </td>
                        </template>
                        <template v-else>
                        <td>Нет предыдущего договора</td>
                        </template>
                    </tr>
                `
            },
        },
    });


    $(function(){
        let buttons = $("i");
        buttons.each( (x,el) => {
            $(el).bind('click',handler);
            return
        });
        function handler(e) {
            $(e.target).toggleClass("fa-plus-square fa-minus-square");
        }
    })
</script>


 } else{
    <style>
        #warning b{
            color: red;
            font-size:140px;
        }
        #warning{
            margin: auto;
            width: 60%;
            border: 3px solid red;
            padding: 10px;
            text-align: center;
            border-radius: 50px;
        }
    </style>

    <div id="warning">
        <b>⚠</b>
        <h1>недостаточно прав для просмотра данного отчета</h1>
        <a href="http://192.168.1.17:8000/ContentArea/Page/View/74?scope=User">вернутся на главную страницу отчетов</a>
        <br>
        <br>
    </div>
}
